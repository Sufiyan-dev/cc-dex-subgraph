// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Rewarded extends ethereum.Event {
  get params(): Rewarded__Params {
    return new Rewarded__Params(this);
  }
}

export class Rewarded__Params {
  _event: Rewarded;

  constructor(event: Rewarded) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TokenAdded extends ethereum.Event {
  get params(): TokenAdded__Params {
    return new TokenAdded__Params(this);
  }
}

export class TokenAdded__Params {
  _event: TokenAdded;

  constructor(event: TokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TokenSwap extends ethereum.Event {
  get params(): TokenSwap__Params {
    return new TokenSwap__Params(this);
  }
}

export class TokenSwap__Params {
  _event: TokenSwap;

  constructor(event: TokenSwap) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIn(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenOut(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get amountOut(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class addedLiquidity extends ethereum.Event {
  get params(): addedLiquidity__Params {
    return new addedLiquidity__Params(this);
  }
}

export class addedLiquidity__Params {
  _event: addedLiquidity;

  constructor(event: addedLiquidity) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class tokenBuyBacked extends ethereum.Event {
  get params(): tokenBuyBacked__Params {
    return new tokenBuyBacked__Params(this);
  }
}

export class tokenBuyBacked__Params {
  _event: tokenBuyBacked;

  constructor(event: tokenBuyBacked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OpenSwap__quoteResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getAmountOut(): BigInt {
    return this.value0;
  }

  getFee(): BigInt {
    return this.value1;
  }
}

export class OpenSwap__tokenInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getPriceFeedAddress(): Address {
    return this.value0;
  }

  getPoolBalance(): BigInt {
    return this.value1;
  }
}

export class OpenSwap extends ethereum.SmartContract {
  static bind(address: Address): OpenSwap {
    return new OpenSwap("OpenSwap", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  feeEarnedInUsd(): BigInt {
    let result = super.call("feeEarnedInUsd", "feeEarnedInUsd():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feeEarnedInUsd(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeEarnedInUsd",
      "feeEarnedInUsd():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocalToken(): Address {
    let result = super.call("protocalToken", "protocalToken():(address)", []);

    return result[0].toAddress();
  }

  try_protocalToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "protocalToken",
      "protocalToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  protocolFeeBasisPoints(): i32 {
    let result = super.call(
      "protocolFeeBasisPoints",
      "protocolFeeBasisPoints():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_protocolFeeBasisPoints(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "protocolFeeBasisPoints",
      "protocolFeeBasisPoints():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  quote(
    tokenIn: Address,
    tokenOut: Address,
    amountIn: BigInt
  ): OpenSwap__quoteResult {
    let result = super.call(
      "quote",
      "quote(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );

    return new OpenSwap__quoteResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_quote(
    tokenIn: Address,
    tokenOut: Address,
    amountIn: BigInt
  ): ethereum.CallResult<OpenSwap__quoteResult> {
    let result = super.tryCall(
      "quote",
      "quote(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(tokenIn),
        ethereum.Value.fromAddress(tokenOut),
        ethereum.Value.fromUnsignedBigInt(amountIn)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenSwap__quoteResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  tokenInfo(param0: Address): OpenSwap__tokenInfoResult {
    let result = super.call(
      "tokenInfo",
      "tokenInfo(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OpenSwap__tokenInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_tokenInfo(
    param0: Address
  ): ethereum.CallResult<OpenSwap__tokenInfoResult> {
    let result = super.tryCall(
      "tokenInfo",
      "tokenInfo(address):(address,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OpenSwap__tokenInfoResult(value[0].toAddress(), value[1].toBigInt())
    );
  }

  tokenRewardPerBlockInBasisPoints(): i32 {
    let result = super.call(
      "tokenRewardPerBlockInBasisPoints",
      "tokenRewardPerBlockInBasisPoints():(uint16)",
      []
    );

    return result[0].toI32();
  }

  try_tokenRewardPerBlockInBasisPoints(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "tokenRewardPerBlockInBasisPoints",
      "tokenRewardPerBlockInBasisPoints():(uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }
}

export class AddTokenCall extends ethereum.Call {
  get inputs(): AddTokenCall__Inputs {
    return new AddTokenCall__Inputs(this);
  }

  get outputs(): AddTokenCall__Outputs {
    return new AddTokenCall__Outputs(this);
  }
}

export class AddTokenCall__Inputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenPriceFeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddTokenCall__Outputs {
  _call: AddTokenCall;

  constructor(call: AddTokenCall) {
    this._call = call;
  }
}

export class BuyBackLiquidityCall extends ethereum.Call {
  get inputs(): BuyBackLiquidityCall__Inputs {
    return new BuyBackLiquidityCall__Inputs(this);
  }

  get outputs(): BuyBackLiquidityCall__Outputs {
    return new BuyBackLiquidityCall__Outputs(this);
  }
}

export class BuyBackLiquidityCall__Inputs {
  _call: BuyBackLiquidityCall;

  constructor(call: BuyBackLiquidityCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amountMin(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BuyBackLiquidityCall__Outputs {
  _call: BuyBackLiquidityCall;

  constructor(call: BuyBackLiquidityCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _protocalToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _protocalFee(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _rewardsPerBlock(): i32 {
    return this._call.inputValues[3].value.toI32();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SwapCall extends ethereum.Call {
  get inputs(): SwapCall__Inputs {
    return new SwapCall__Inputs(this);
  }

  get outputs(): SwapCall__Outputs {
    return new SwapCall__Outputs(this);
  }
}

export class SwapCall__Inputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }

  get tokenIn(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenOut(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amountIn(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amountOutMin(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class SwapCall__Outputs {
  _call: SwapCall;

  constructor(call: SwapCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateProtocalFeeCall extends ethereum.Call {
  get inputs(): UpdateProtocalFeeCall__Inputs {
    return new UpdateProtocalFeeCall__Inputs(this);
  }

  get outputs(): UpdateProtocalFeeCall__Outputs {
    return new UpdateProtocalFeeCall__Outputs(this);
  }
}

export class UpdateProtocalFeeCall__Inputs {
  _call: UpdateProtocalFeeCall;

  constructor(call: UpdateProtocalFeeCall) {
    this._call = call;
  }

  get _newProtocalFeeInBasisPoint(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdateProtocalFeeCall__Outputs {
  _call: UpdateProtocalFeeCall;

  constructor(call: UpdateProtocalFeeCall) {
    this._call = call;
  }
}

export class UpdateRewardPerBlockCall extends ethereum.Call {
  get inputs(): UpdateRewardPerBlockCall__Inputs {
    return new UpdateRewardPerBlockCall__Inputs(this);
  }

  get outputs(): UpdateRewardPerBlockCall__Outputs {
    return new UpdateRewardPerBlockCall__Outputs(this);
  }
}

export class UpdateRewardPerBlockCall__Inputs {
  _call: UpdateRewardPerBlockCall;

  constructor(call: UpdateRewardPerBlockCall) {
    this._call = call;
  }

  get _newRewardPerBlock(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class UpdateRewardPerBlockCall__Outputs {
  _call: UpdateRewardPerBlockCall;

  constructor(call: UpdateRewardPerBlockCall) {
    this._call = call;
  }
}

export class UpdateTokenCall extends ethereum.Call {
  get inputs(): UpdateTokenCall__Inputs {
    return new UpdateTokenCall__Inputs(this);
  }

  get outputs(): UpdateTokenCall__Outputs {
    return new UpdateTokenCall__Outputs(this);
  }
}

export class UpdateTokenCall__Inputs {
  _call: UpdateTokenCall;

  constructor(call: UpdateTokenCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenPriceFeed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class UpdateTokenCall__Outputs {
  _call: UpdateTokenCall;

  constructor(call: UpdateTokenCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
